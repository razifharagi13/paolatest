{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","loading","items","fetch","then","res","json","parsedJSON","results","map","data","id","name","firstName","first","lastName","last","birthDay","dob","date","slice","gen","gender","phone","cell","email","city","location","streetNumber","street","number","streetName","nat","country","thumbnail","picture","large","setState","isLoaded","catch","error","console","log","this","className","item","key","to","src","alt","frameBorder","allowFullScreen","href","React","Component","Boolean","window","hostname","match","setTimeout","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.663d13df.chunk.js","sourcesContent":["import React from 'react';\r\nimport {BrowserRouter, Route,Switch, Link} from 'react-router-dom'\r\nimport './App.css';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      loading: true,\r\n      items: []\r\n\r\n    };\r\n\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch(\"https://randomuser.me/api/\")\r\n      .then(res => res.json())\r\n      .then(parsedJSON => parsedJSON.results.map(data => (\r\n        {\r\n            id: `${data.id.name}`,\r\n            firstName: `${data.name.first}`,\r\n            lastName: `${data.name.last}`,\r\n            birthDay: `${data.dob.date.slice(0,10)}`,\r\n            gen:  `${data.gender}`,\r\n            phone: `${data.cell}`,\r\n            email: `${data.email}`,\r\n            city: `${data.location.city}`,\r\n            streetNumber: `${data.location.street.number}`,\r\n            streetName: `${data.location.street.name}`,\r\n            nat: `${data.location.country}`,\r\n            thumbnail: `${data.picture.large}`,\r\n\r\n        }\r\n\r\n      )))\r\n      .then(items => this.setState({\r\n          items,\r\n          isLoaded: false\r\n        }))\r\n        .catch(error => console.log('parsing failed', error))\r\n\r\n  }\r\n\r\n  render(){\r\n      const { items } = this.state;\r\n\r\n      return (\r\n          <BrowserRouter>\r\n\r\n            <div className=\"container-fluid myBox p-0\">\r\n            {\r\n               items.map(item => {\r\n              const {id, firstName, lastName, thumbnail, birthDay, gen, phone, email, city, streetNumber, streetName, nat} = item;\r\n\r\n\r\n               return (\r\n\r\n                 <div key={id}>\r\n\r\n                 <header>\r\n                    <Link to={'/'+ firstName+ '_'+ lastName}>{firstName} {lastName}</Link>\r\n                     <nav>\r\n                        <ul>\r\n                          <li><Link to='/about'>About</Link></li>\r\n                          <li><Link to='/resume'>Resume</Link></li>\r\n                          <li><Link to='/education'>Education</Link></li>\r\n                          <li><Link to='/portfolio'>Portfolio</Link></li>\r\n                        </ul>\r\n                     </nav>\r\n                 </header>\r\n\r\n                 <div  className=\"row m-0\">\r\n                   <div className=\"col-sm-6 p-0\">\r\n                     <div className=\"image-box\"><img src={thumbnail} alt={firstName} className=\"img-fluid\" /></div>\r\n                   </div>\r\n                   <div className=\"col-sm-6 p-0\">\r\n                     <div className=\"bio-box\">\r\n                      <h1>{firstName} {lastName}</h1>\r\n                      <h5>Developer</h5>\r\n\r\n                      <div className=\"row m-0\">\r\n\r\n                        <div className=\"col-3 p-0\">\r\n                            <p>Date of Birth <span>:</span></p>\r\n                            <p>Gender <span>:</span></p>\r\n                            <p>Phone <span>:</span></p>\r\n                            <p>Email <span>:</span></p>\r\n                            <p>Address <span>:</span></p>\r\n                            <p>Location <span>:</span></p>\r\n                        </div>\r\n\r\n                        <div className=\"col-6 p-0\">\r\n                            <p> {birthDay}</p>\r\n                            <p> {gen}</p>\r\n                            <p> {phone}</p>\r\n                            <p> {email}</p>\r\n                            <p> {streetName} {streetNumber} {city}, {nat} </p>\r\n                            <div  className=\"z-depth-1-half map-container\" >\r\n                                <iframe src=\"https://maps.google.com/maps?q=chicago&t=&z=13&ie=UTF8&iwloc=&output=embed\" frameBorder=\"0\"\r\n             allowFullScreen></iframe>\r\n                            </div>\r\n                        </div>\r\n\r\n                       </div>\r\n\r\n                     </div>\r\n                   </div>\r\n\r\n                 </div>\r\n\r\n                 <div className=\"footer-box\">\r\n                    <a href=\"#\"><i className=\"fab fa-linkedin-in\"></i></a>\r\n                    <a href=\"#\"><i className=\"fab fa-facebook-f\"></i></a>\r\n                    <a href=\"#\"><i className=\"fab fa-twitter\"></i></a>\r\n                    <a href=\"#\"><i className=\"fab fa-google-plus-g\"></i></a>\r\n                    <a href=\"#\"><i className=\"fab fa-instagram\"></i></a>\r\n                 </div>\r\n\r\n                 </div>\r\n\r\n              );\r\n            })\r\n            }\r\n            </div>\r\n          </BrowserRouter>\r\n          );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nsetTimeout(() =>\nReactDOM.render(<App />, document.getElementById('root')), 3000\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}